python 3-20 笔记

回顾：
1. 变量赋值
    a. 增量赋值：+= -= *=
    b. 链式赋值：a = b = c = d
    c. 交叉赋值：x = 1, y = 2   --> x, y = y, x
    d. 变量的解压：first, *_, last = [1, 2, 3, 4, 5]

2. 用户交互
    a. 把用户输入的任何内容都存成字符串
    input():  python3 
    raw_input: python2

    int('101')
    str([1, 2, 3])

    b. 用户必须输入一个明确的数据类型，输入什么类型就存成什么类型
    input():  python

3. while..else 语句
    只有在 while 语句没有被 break 语句中断的情况下，else 后的代码才会执行

4. 数据类型
    a. int 整型
    十进制转成其他进制
    bin()    --> 二进制
    oct()    --> 八进制
    hex()    --> 十六进制

    补充：
        a. long 长整型
            python3 没有 long 长整型
            python2 中有 long    x=1L
        b. 复数
            x = 1-2j
            x.real = 1     # 实部
            x.imag = -2    # 虚部
    b. float 浮点型
    c. str 字符串
        定义：定义在引号内的字符，就是字符串  name = 'egon'  # name = str('egon')
        总结：
            字符串总结：
            字符串只能存一个值；
            有序；              # 可以按照索引取值，就是有序的
            不可变数据类型；
            可 hash；
        常用操作：
            1) 按索引取值（只能取不能改）
                name = 'egon'
                s = name[0]
            2) 切片
                msg = 'abcdefg'
                正向
                msg[0:5:2]
                反向
                msg[5:3:-1]
                msg[-1:-3:-1]
            3）成员运算 in 和 not in
                msg = 'egon is nb'
                'egon' in msg

                'egon' not in msg
                not 'egon' in msg   # 先判断 not 后面的部分，然后在 not 反一下

            4）统计字符串的长度 --> 字符的个数
                len('xxxxxxxxxxxxx中')

            5) strip() 移除空白
                name = input('name>>: ').strip()

                ‘sss###***’.strip('#*')

            6) split 拆分字符串
                cmd = 'root:123:0:0'
                l = cmd.split(':')

            7) 循环取字符串里所有的字符
                msg = 'xxxxxxx'
                依赖索引
                i = 0
                while i < len(msg):
                    print(msg[i])
                    i += 1

                for i in range(len(msg)):
                    print(msg[i])

                不依赖索引
                for m in msg:
                    print(m)
新笔记
            8）isdigit() 判断是否是数字
                print('10'.isdigit())

                age = 18
                i = 0
                while True:
                    inp_age = input('age >>: ').strip()
                    if not inp_age.isdigit():
                        print('输入数据非法')
                        continue
                    else:
                        inp_age = int(inp_age)
                    if inp_age > age:
                        print('猜大了')
                        i += 1
                    if inp_age < age:
                        print('猜小了')
                        i += 1
                    if i == 3:
                        print('Try too many times')
                        break
                    if inp_age == age:
                        print('恭喜你猜对了！')
                        break

            9）了解知识点：
                1. find() rfind() index() rindex() count()
                    msg = 'my egon hegon 123'
                    print(msg.find('sb'))
                    print(msg.find('egon', 8, 20))
                    print(msg.rfind('egon', 8, 20))

                    print(msg.index('egon'))
                    print(msg.index('sb'))

                2. center() ljust() rjust() zfill()
                    print('==================end====================')
                    print('egon'.center(50, '*'))
                    print('egon'.ljust(50, '*'))
                    print('egon'.rjust(50, '*'))
                    print('egon'.zfill(50))

                3. expandtabs()
                    msg = 'abc\tdef'
                    print(msg.expandtabs(4))

                4. capitalize() swapcase() title()
                    print('abeCdEF'.capitalize())
                    print('abeCdEF'.swapcase())
                    print('my name is egon'.title())

                5. is 数字系列
                    num1 = b'4'    # bytes
                    num2 = u'4'    # unicode，python3 中无需加 u 就是 Unicode
                    num3 = '四'    # 中文数字
                    num4 = 'IV'    # 罗马数字

                    print(num1.isdigit())
                    print(num2.isdigit())
                    print(num3.isdigit())
                    print(num4.isdigit())

                    print(num2.isdecimal())
                    print(num3.isdecimal())
                    print(num4.isdecimal())

                    print(num1.isalnum())
                    print(num2.isalnum())
                    print(num3.isalnum())
                    print(num4.isalnum())

                6. is 其他
                    isalpha()      # 是否都是字母
                    isalnum()      # 是否都是数字 --> 4种数字格式
                    isnumeric()    # 是否都是数字 --> 只针对unicode对象
                    isdigit()      # 是否都是数字 --> 针对 bytes、unicode 对象
                    isdecimal()    # 是否是数字 --> 针对除了 bytes 之外的对象
                    islower()      # 是否是小写字母
                    isupper()      # 是否是大写字母
                    isspace()      # 是否是空格
                    istitle()      # 是否是标题
                    isprintable()  # 是否是可以通过repr表示成字符串
                    isidentifier() # 是否包含保留字
    d. list 列表类型：
        用途：存放多个值
        定义：l = ['a', 'b', 'c']    # l = list(['a', 'b', 'c'])
        总结列表：
            可以存多个值；
            有序；
            可变数据类型；
            不可 hash；
        常用操作和内置方法：
            1）按索引取值（正反向，既可以取也可以存）
                l = ['a', 'b', 'c']
                print(id(l))
                print(l[-1])
                l[0] = 'A'
                print(id(l))
                l[3] = 'd'       # 不存在的索引，报错
            2）切片（顾头不顾尾，步长）
                stus = ['alex', 'wxx', 'yxx', 'lxx']
                print(stus[0:3:1])
            3）长度 len()
                stus = ['alex', 'wxx', 'yxx', 'lxx']
                print(len(stus))
            4）成员运算 in 和 not in
                stus = ['alex', 'wxx', 'yxx', 'lxx']
                print('alex' in stus)
            5）追加
                stus = ['alex', 'wxx', 'yxx', 'lxx']
                stus.append('wupeiqi')
                stus.append('peiqi')
                print(stus)
            6）插入
                stus = ['alex', 'wxx', 'yxx', 'lxx']
                stus.insert(1, '艾利克斯')  # 按照索引插入新元素
                print(stus)
            7）删除
                stus = ['alex', 'wxx', 'yxx', 'lxx']
                # del stus[1]
                stus.remove('alex')       # 按照成员方式删除
                stus.pop(1)               # 按照索引方式删除
                print(stus)
            8）循环
                stus = ['alex', 'wxx', 'yxx', 'lxx']
                依赖索引
                i = 0
                while i < len(stus):
                    print(stus[i])
                    i += 1

                for i in range(len(stus)):
                    print(stus[i])

                不依赖索引
                for i in stus:
                    print i
            # 前提：只能同类型直接比较大小，对于有索引值直接的比较是按照位置一一对应进行对比的
            # s1 = 'hello'
            # s2 = 'hf'
            # print(s1 > s2)

            # l1 = ['a', 'b', 'c']
            # l2 = ['d']
            # print(l1 > l2)

            # l1 = [3, 'a', 'b', 'c']
            # l2 = [xxx, 'd']
            # print(l1 > l2)                    # 不通类型之间比较大小，报错

            print('Z' > 'a')
            print('a' > 'B')

            # 练习
            # 队列：先进先出
            l1 = []
            # 入队
            l1.append('1')
            l1.append('2')
            l1.append('3')
            # l1.insert(-1, '1')
            # l1.insert(-1, '2')
            # l1.insert(-1, '3')
            # 出队
            l1.pop(0)
            l1.pop(0)
            l1.pop(0)

            # 堆栈：先进后出
            l2 = []
            # 入栈
            l2.append('1')
            l2.append('2')
            l3.append('3')
            # l2.insert(-1, '1')
            # l2.insert(-1, '2')
            # l2.insert(-1, '3')
            # 出栈
            l2.pop()
            l2.pop()
            l2.pop()




