python 3-28 笔记
回顾：
一、函数的参数
1、形参与实参是什么?
    定义：形参即变量名，实参即变量值。 
    注意： 
        经常需要变得参数定义成位置形参;
        变化较小的参数定义成默认形参；
    1）位置参数 
        a. 位置形参：必须被传值，多一个不行，少一个不行；              
        b. 位置实参：按照从左到右的方式与形参一一对应；
    2）关键字参数  
        关键字实参
        按照key=value的形式指名道姓的为形参传值，可以完全不按照顺序。
        a. 关键字实参，必须在位置参数后面；
        b. 位置实参和关键字实参可以混合使用，但不能重复对同一个形参赋值；

    3）默认参数
        默认形参
        a. 默认形参在定义时就已经为其赋值，并且只能赋值一次；
        b. 默认形参定义在位置形参的右面，最好定义为不可变数据类型；
        c. 可以传值也可以不传值;
    4）可变长参数
        a. 可变长位置参数
            位置形参：*args
            位置实参：*[1,2,3]
            应用场景:
                def sum2(*args):
                    res = 0
                    for num in args:
                        res += num
                    return res

                sum2(*[1,2,3,4,5,6])
        b. 可变长关键字实参
            关键字形参：**kwargs
            关键字实参：**{'a': 1, 'b':2}
            应用场景:
                def auth(name, age, **kwargs):
                    print(name)
                    print(age)
                    print(kwargs)

                auth('egon', '123')
    5）命名关键字参数
        注意：*后面定义的参数都是命名关键字参数
        例子：
            def auth(*, name, password):
                print(name, password)

            auth(name='egon', password='123')
        特点：
            a. 约束函数的调用者，必须被传值，且必须按照key=value的形式传值；（有默认值除外）
            b. 约束函数的调用者，必须用指定的key；

函数对象、函数嵌套、名称空间与作用域、装饰器
一、函数对象
1. 函数是一类对象，即函数可以当作数据传递
    1）可以被引用；
    2）可以当作参数传递；
    3）返回值可以是函数；
    3）可以当作容器类型的元素；
2. 利用函数对象可传递的特性，优雅取代多分支的if
    例子：
    def foo():
        print('foo')

    def bar():
        print('bar')

    dic={
        'foo':foo,
        'bar':bar,
    }
    while True:
        choice=input('>>: ').strip()
        if choice in dic:
            dic[choice]()
二、函数嵌套
1. 函数的嵌套调用
    def max(x,y):
        return x if x > y else y

    def max4(a,b,c,d):
        res1=max(a,b)
        res2=max(res1,c)
        res3=max(res2,d)
        return res3
    print(max4(1,2,3,4))
2. 函数的嵌套定义
    def f1():
        def f2():
            def f3():
                print('from f3')
            f3()
        f2()

    f1()
    f3()         # 调用内部函数报错，不在全局的命名空间

三、名称空间与作用域
1. 什么是名称空间？
    名称空间：
        存放名字与值绑定关系的地方，就是名称空间。
    例子：
        x = 1，1存放于内存中，那名字x存放在哪里呢？ --> 名称空间：存放名字 x，和存放 x与1 绑定关系。
2. 名称空间的加载顺序
    内置名称空间 --> 全局名称空间 --> 局部名称空间
    python test.py
    1）python解释器先启动，加载内置名称空间（python解释器自带的）；
    2）执行test.py文件，然后以文件为基础，加载全局名称空间；
    3）在执行文件的过程中如果调用函数，则临时产生局部名称空间；
    内置名称空间：随着python解释的启动而生效，解释器运行结束失效；
    全局名称空间：文件级别的名字，在运行文件时生效，运行结束结束或运行时被删除失效；
    局部名称空间：只存在函数内部，只有在函数被调用时临时生效，调用结束失效；
3. 名字的查找顺序
    局部名称空间 ---> 全局名称空间 ---> 内置名称空间
    注意：在全局无法查看局部的，在局部可以查看全局的
4.作用域
    1）作用域即范围
        全局作用域（内置名称空间与全局名称空间）：全局存活，全局有效；
            a. 在任意位置都能访问到；
            b. 该范围的名字会伴随程序整个生命周期；
        局部作用域（局部名称空间）：临时存活，局部有效；
            a. 只能在函数内使用；
            b. 调用函数时生效，调用结束失效；
    2）作用域关系是在函数定义阶段就已经固定的，与函数的调用位置无关；

5. 关键字 global 与 nonlocal 
    1）关键字 global 
        a. 声明全局变量，如果在局部要对全局变量修改，需要在局部也要先声明该全局变量。
        b. 在局部如果不声明全局变量，并且不修改全局变量。则可以正常使用全局变量。
    2）关键字 nonloccal   用来在函数或其他作用域中使用外层(非全局)变量
        用来在函数或其他作用域中使用外层(非全局)变量。

四、闭包函数
1. 什么是闭包？
    内部函数包含对外部作用域而非全局作用域的引用。
2. 闭包的意义与应用
    1）意义：
        返回一个包含上层作用域状态的函数对象，该函数对象无论在何处调用，优先使用自己外层包裹的作用域。
    2) 应用领域：
        延迟计算（原来我们是传参，现在我们是包起来）
    例子：
    from urllib.request import urlopen

    def index(url):
        def get():
            return urlopen(url).read()
        return get

    baidu=index('http://www.baidu.com')
    print(baidu().decode('utf-8'))













