python 4-12 笔记

回顾
1. 类与对象
    对象：特征与技能的结合体；
    类：一系列对象相同的特征与技能的结合体；
    现实中的对象 --> 抽象 --> 现实中的类 --> 在程序中定义类 --> 调用类（实例化）--> 程序中的对象

2. 定义类
    强调：
        类中最常见的就是变量与函数的定义，但类中也可以有其它python代码；
    名称空间的查找顺序：
        1）先查找对象自己的属性；
        2）再查找类的属性；
    函数和类的区别：
        1) 函数内的代码，在定义阶段不会运行； ==> 定义阶段，就产生类的名称空间
        2）类内部的代码，在定义阶段就会运行； ==> 运行阶段，才会产生名称空间
    例子：
        class People:
            country = 'China'

            def __init__(self, name):
                self.name = name

            def run(self):
                print('%s is running ...' % self.name)
    属性查看：
        People.country    => 'China'
        People.run        => function
        People.run(123)   => 调用类的方法
    属性增加：
        People.x = 1
    属性修改：
        People.country = 'CHINA'
    属性删除：
        del People.country
3. 实例化对象
    为对象初始化独有的特征：
    1）直接指定：
        obj.name = 'egon'
        obj.age = 18
    2) 使用自定义的 chu_shi_hua 方法：
        chu_shi_hua(obj, 'egon', 18)
    3）使用 __init__ 方法：
        obj = class('egon', 18)
4. __init__ 方法：
    强调：
        1）该方法内可以有任意的python代码；
        2）一定不能有返回值；   
5. 绑定方法：
    1）绑定给谁，就应该由谁来调用；
    2）谁来调用，就把谁当做第一个参数传入__init__方法；
6. 一切皆对象
    在python3中统一了类与类型的概念，类即类型；

新笔记
1. 什么是继承？
    继承是一种新建类的方式，在python中支持一个子类继承多个父类；
    新建的类，称之为子类或派生类；
    父类，又可以称之为基类或超类；

    子类会遗传父类的属性；
    区别：
        1）python2 中有经典类和新式类；
        2）python3 中全都是新式类；
    继承是类与类之间的关系，寻找这种关系就需要先抽象再继承；
2. 为什么要使用继承？
    减少代码冗余
3. 使用继承
    class PareentClass1:
        pass

    class PareentClass2:
        pass

    class SubClass1:
        pass

    class SubClass2:
        pass

4. 类的区分
    新式类：
        继承了 object 类的类，及其子类都是新式类；
    经典类：
        1）不继承 object 类的类，及其子类都是经典类；
        2）只有在 python2 中；
    python版本的不同：
        1）python3 当中，所有的类默认继承 object 类；
        2）python2 当中，需要指定继承 object 类才是新式类；
    经典类和新式类属性查找的区别：
        1）在菱形继承的背景下：
            a. 经典类：深度优先；
            b. 新式类：广度优先；
        2）非菱形继承的背景下：
            经典类和新式类都是从左到右，依次寻找每个分支；













