python 3-23 笔记

回顾：
一、字符编码
人类的字符 --> 翻译 --> 数字
翻译的过程遵循的标准即字符编码（就是一个字符与一个数字一一对应的关系）。
ascii
gbk：中文：2bytes 英文：1bytes
unicode: 任意字符: 2bytes
utf-8: 中文：3bytes 英文：1bytes

掌握：
    1. 以什么编码存的，就应该以该编码取
        文件头 encoding: utf-8 
        a. 用python解释器读取文件的时候才会使用；
        b. 所以文件头指定的编码必须跟python文件存储时用的编码一致；
    2. unicode --> 编码encode --> utf-8
    3. utf-8 --> 解码decode --> unicode
    4. python3中str是以unicode编码方式存储的
        x = '你好'
        b = x.encode('utf-8')        # 结果是 bytes 类型
        b.decode('utf-8')            # 结果是 unicode 类型
    5. bytes类型的用途
        a. 存储到文件；
        b. 基于网络传输；

二、文件处理
1. 打开文件
    python3 只有open()方法
    python2 有 open() 和 file() 两种方法
    语法：
        open(r'文件的路径', mode='打开文件的模式', encoding='操作文件的编码方式')
        mode:      默认是 rt
        encoding:  默认使用操作系统的编码方式
        r(raw):    转义文件路径中的换行符
    例子：
        f = open(r'C:\a\b\c\d.txt', mode='r', encoding='utf-8')
        f.read()
        f.close()            # 关闭文件

        with open('a.txt') as f1,\
                open('b.txt') as f2,\
                open('c.txt') as f3:
            pass

2. 文件的打开模式
    r 读 rb 二进制读 r+ 可读写 # 文件不存在报错
    w 写 wb 二进制写 w+ 可读写 # 文件存在覆盖，不存在则创建新文件；
    a 追加 ab 二进制追加 a+ 可读写 # 文件存在覆盖，不存在则创建新文件；
    1). t 模式（默认），t 不能单独使用，必须是 rt, wt, at
        r: 只读模式
        w: 只写模式
        a: 追加模式
    2). b 模式（二进制模式）
        强调：
            第一点：与t模式类似不能单独使用，必须是 rb, wb, ab；
            第二点：b模式下读写都是以 bytes 单位的；
            第三点：b模式下一定不能指定 encoding 参数；
        a. rb 模式
            with open('1.jpg', mode='rb',) as f:
                data = f.read()
                print(data,)
                print(type(data))

            with open('1.jpg', mode='rb') as f:
                for line in f:
                    print(line)

            with open('db.txt', mode='rb',) as f:
                data = f.read()
                print(data.decode('utf-8'))             # bytes --> unicode
                print(type(data))
        b. wb 模式
            with open('b.txt', mode='wb') as f:
                msg = '你好呀，吴敏浩'
                f.write(msg.encode('gbk'))              # unicode --> gbk
                f.write(msg.encode('utf-8'))            # unicode --> bytes

        c. ab 模式
            with open('b.txt', mode='wb') as f:
                msg = '你好'
                f.write(msg.encode=('utf-8'))           # unicode --> bytes
    3) + 模式
        r+/rb+  w+/wb+ a+/ab+
3. 操作方法
    f.read()                  # 一次读文件所有数据
    f.readline()              # 一次读文件的一行
    f.readlines()             # 一次读文件的所有数据，以行为单位，生成一个列表

    f.write()                 # 向文件写字符串类型数据
    f.writelines()            # 向文件写元组，列表等序列类数据

4. 循环读取文件每一行内容
    # 内存只有一行数据
    with open('a.txt') as f:
        for line in f:
            print(line)
    # 文件大的情况下，一次读取所有数据到内存，占用大量内存
    with open('a.txt') as f:
        for line in f.readlines():
            print(line)

5. 复制文件小程序
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    import sys

    l = sys.argv
    if len(l) == 3:
        src_path = l[1]
        dst_path = l[2]
    else:
        print('参数错误！请输入文件的源地址和目标地址！')
        sys.exit()
    with open(r'%s' % src_path, 'rb') as f1, open(r'%s' % dst_path, 'wb') as f2:
        for line in f1:
            f2.write(line)

6. 修改文件小程序
    1) 第一种方式：
        第一步：先把文件内容全部读入内存；
        第二部：然后再内存中完成修改；
        第三部：再把修改后的结果，覆盖写入原文件；
        缺点：会在文件内容过大的情况下，占用很多内存
        with open(r'user.txt', 'r') as f:
            data = f.read()
            data = data.replace('吴佩琪', '吴佩琪[老男孩老师]')
        with open(r'user.txt.swap', 'w') as f:
            f.write(data)
    2) 第二种方式：
        import os

        str_s = '吴佩琪'.encode('utf-8')
        str_r = '吴佩琪[老男孩老师]'.encode('utf-8')
        with open(r'user.txt', 'rb') as f1, open(r'user.txt.swap', 'wb') as f2:
            for line in f1:
                if str_s in line:
                    line.replace(str_s, str_r)
                f2.write(line)
        os.remove('user.txt')
        os.rename('user.txt.swap', 'user.txt')

7. 文件的光标移动 seek()
    with open(r'users.txt', 'r+') as f:
        f.seek(9)
        print(f.tell())




