python 3-22 笔记

回顾
1. 元组（相当于不可变的列表）
    定义：  t = (1, 2, 'a')
    补充：  t = (1, 'a', [1, 2,])
    用途：当存放多个值，只有读的需求，没有写的需求；
    常用操作：
        a. 循环
            t = (1, 2, 'a')
            依赖索引：
            i = 0 
            while i < len(i):
                print(t[i])
                i += 1

            for i in range(len(t)):
                print(t[i])

            不依赖索引：
            for i in t:
                print(i)

2. 字典
    定义：
        d = {'x': 1, 'y': 2}       # key 必须为不可变数据类型
    用途：存多个值，每一个值都有一个映射关系；
        user = {
            'name': 'egon',
            'age': 18,
            'hobbies': ['read', 'music', 'play']
        }
    常用操作：
        a. 成员运算 in 和 not in
            'name' in user
        2. 循环
            for k in user:
                print(k, user[k])

            for v in user.values():
                print(v)

            for k,v in user.items():
                print(k, v)
3. 集合
    定义： s = {1, 1, 1}
    注意：
        集合无序；
        集合内元素不能重复；
        集合内的元素必须为不可变数据类型；
    用途：
        集合使用来进行关系元素，单独取集合的某一个元素没有意义，也没有相应的获取方法；
    操作：
        a. 交集: s1&s2 取两个集合的共同部分；
        b. 差集：s1-s2 取存于s1而不存于s2的元素集合；
        c. 补集：s1^s2 扣掉s1与s2的共同部分，剩下的元素集合；
        d. 并集：s1|s2 把两个集合合到一起，去掉重复；
    总结：
        可以存多个值；
        无序；
        可变数据类型；
        不可 hash；

新笔记
数据类型总结
    a. 按存储空间的占用（从低到高）
        数字；
        字符串；
        集合；          # 无序，即无序存索引相关信息
        元组；          # 有序，需要存索引相关信息，不可变
        列表；          # 有序，需要存索引相关信息，可变，需要处理数据的增删改
        字典；          # 无序，需要存key与value映射的相关信息，可变，需要处理数据的增删改
    b. 按存值个数分
        标量／原子类型： 数字、字符串；
        容器类型：      列表，元组，字典，集合
    c. 按可变不可变区分
        可变:    列表，字典
        不可变:  数字，字符串，元组
    d. 按访问顺序区分
        直接访问:               数字
        顺序访问（序列类型）:    字符串，列表，元组
        key 值访问（映射类型）:  字典

一、字符编码
1. 字符编码知识储备
    CPU
    内存
    硬盘

2. python 解释器执行 python 程序的原理
    python test.py
    第一阶段：先启动python解释器；
    第二阶段：把test.py文件的内容读入内存；
    第三阶段：解释执行，识别语法；

3. 执行python程序第一、二阶段
    在编写python程序的时候，是没有语法的限制的，编辑的结果和一个普通文件没有任何区别。
    只有把python程序交给python解释器，并在第三个阶段才有了语言意义。

4. 执行python程序第三阶段
    会识别python语法，定义的字符串类型又涉及到字符编码的概念
    python2: 
        str：x = '上'
        指定变量，会按照文件头指定的编码方式存内存
    python3: 
        str: x = '上'
        指定变量，直接按照unicode编码方式存内存

5. 什么是字符编码？
    含义：人类语言翻译为和数字一一对应的过程，遵循的标准即字符编码。
    总结：
        1）保证不乱吗的核心法则，就是字符按照什么标准而编码的，就要按照什么标准解码；（能控制的只能是存到硬盘上的编码）
        2）在内存中写的所有字符，都是unicode编码，只有往硬盘保存或者基于网络传输时unicode才会转换成其他编码；
    人类的字符 --> 翻译 --> 数字
    翻译的过程必须遵循一个标准，字符与数字一一对应的关系，这个标准称之为字符编码。
    
    ASCII
    8bit = 1bytes  一个英文字符占用1个字节

    GBK
    16bit = 2bytes 2个字节表示一个中文字符，1字节表示一个英文字符

    Shift_JIS 日文
    Euc_kr 韩文

    unicode（内存中的编码）
    16bit = 2bytes 2个字节表示一个中文字符

    utf-8: unicode transformation 1~4个字符表示一个字符 
    utf-8 是一种 unicode 编码的实现方式

    python3: 默认 utf-8 编码
    python2: 默认 ascii 编码

7. 编码转换
    unicode --> 编码 encode --> gbk
    gbk --> 解码 decode --> unicode

二、文件操作
1. 打开文件 
    python3 只有open()方法
    python2 有 open() 和 file() 两种方法
    1）语法
        open('文件的路径', mode='打开文件的模式', encoding='操作文件的编码方式')
    2）操作文件的模式
        r 读    rb 二进制读    r+ 可读写     # 文件不存在报错
        w 写    wb 二进制写    w+ 可读写     # 文件存在覆盖，不存在则创建新文件；
        a 追加  ab 二进制追加  a+ 可读写      # 文件存在覆盖，不存在则创建新文件；
    3）默认使用操作系统的编码方式
    4）转义文件路径中的换行符 
        f = open(r'文件路径')
2. 读取文件
    f.read()            # 读取所有的数据
    f.readline()        # 读取一行数据
    f.readlines()       # 读取所有数据，以行为单位添加到一个列表中
3. 写文件   
    f.write()           # 写内容，需要自己写换行符
    f.writelines()      # 写一个序列的内容，需要自己写每个元素的换行符
4. 关闭文件
    f.close()
5. with open 语句
    不需要调用 f.close()，并且可以同时打开多个文件
    with open('a1.txt', 'rw') as f1, open('a2.txt', 'rw') as f2:
        print('===>')
        f1.read()
        f2.read()
6. 循环读取文件
    with open('a.txt', encoding='utf-8') as f:
        # 这种方式是最好的，内存只有一行数据
        for line in f:
            print(line, end='')
        # 这种方式文件大的情况下，一次读取所有数据到内存，可能会耗尽内存
        for line in f.readlines():
            print(line, end='')





