python 4-2 笔记

回顾
1. 迭代器
    可迭代的对象：
    但凡内置有__iter__方法的对象，就是可迭代的对象。

    迭代器对象：
        调用可迭代对象的__iter__方法，得到的返回值就是迭代器对象。

        既内置有__iter__方法，还有__netx__方法；
        执行迭代器对象的__iter__方法，得到的仍然是迭代器本身；
        执行迭代器对象的__netx__方法，得到的是迭代器的下一个值；

    for 循环后面跟的一定是可迭代的对象。
    优点：
        1）提供了一种不依赖索引的取值方式；
        2）同一时刻在内存中，只存在有一个值，更节省内存；
    缺点：
        1）取值麻烦，必须一个一个取值；
        2）只能往后取值，一次性的，最后会报 StopIteration报错；
2. 生成器
    函数内有 yield 关键字，再调用函数就不会立刻执行函数体代码，而是会得到一个返回值，该返回值就是生成器。生成器本质就是迭代器。
    总结：
        1）提供了一种自定义迭代器的方式；
        2）可以保存函数状态，可以返回多个值；

3. 面向过程编程
    1）什么是面向过程编程？
        核心是‘过程’二字，指的是解决问题的步骤。即先干什么，再干什么。
        基于该思想的编写程序，就好比在设计一条流水线，是一种机械的思维方式；
    2）优点：
        复杂的问题流程化，进而简单化；
    3）缺点：
        扩展性差；

新笔记
1. 三元表达式
    1）函数方式：
    def max2(x, y):
        if x > y:
            return x
        else:
            return y

    2）三元表达式：
        仅用于条件成立返回一个值，条件失败返回一个值；
        res = x if x > y else y

        def max2(x, y):
            return x if x > y else y
2. 函数递归
    函数的递归调用：
        在函数的调用过程中，又直接或间接的调用了函数本身，就叫做函数的递归调用。
    两个阶段：
        1）回溯：
            一定要在满足某种条件结束回溯，否则无限回溯；
            没进入下一次递归，问题的规模都应该减少；
            在 python 中没有尾递归优化；
        2）递推：
        
    例子：
        def age(n):
            if n == 1:
                return 18
            return age(n-1)+2
            # return 18 if n == 1 else age(n-1)+2

        print(age(5))

        items = [1,[2,[3,[4,[5,[6,[7,[8]]]]]]]]
        def tell(l):
            for item in l:
                if type(item) is not list:
                    print(item)
                else:
                    tell(item)

        tell(items)

3. 匿名函数
    1）匿名函数的目的就是没有名字，给匿名函数赋给一个名字是没有意义的；
    2）匿名函数的参数原则，作用域关系与有名函数是一样的；
    3）匿名函数的函数体，通常应该是一个表达式，该表达式必须要有一个返回值；
        f = lambda x,n:return print('---->')
        f(1,2)
    lambda 应用：
        max,min,sorted,map,filter,reduce
        max(): 取最大值
            max(iterable, key=func)
        min(): 取最小事
            main(iterable, key=func)
        sorted: 排序
            sorted(iterable, key=func, reverse=True)
        map(): 映射为一个含有所有返回值的新列表
            map(func, iterable)
        reduce(): 把结果继续和序列的下一个元素做累积计算
            reduce(function, sequence, initial)
        filter(): 过滤列表返回值为真的新列表
            filter(function, iterable)










